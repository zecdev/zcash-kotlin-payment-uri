import java.util.Base64
import org.jreleaser.model.Active
/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Kotlin library project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.2.1/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the org.jetbrains.kotlin.jvm Plugin to add support for Kotlin.
    id("org.jetbrains.kotlin.jvm") version "2.0.20"
    id("io.kotest") version "0.4.11"
    id("org.jlleitschuh.gradle.ktlint") version "12.1.1"
    id("io.gitlab.arturbosch.detekt") version "1.23.7"

    `maven-publish`
    id("org.jreleaser") version "1.14.0"
    signing
    // Apply the java-library plugin for API and implementation separation.
    `java-library`
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use kotest
    testImplementation("io.kotest:kotest-runner-junit5:5.9.0")
    testImplementation("io.kotest:kotest-property:5.9.0")
    testImplementation("io.kotest:kotest-assertions-core-jvm:5.9.0")
    testImplementation("io.kotest:kotest-framework-engine-jvm:5.9.0")

    // Use Detekt
    detektPlugins("io.gitlab.arturbosch.detekt:detekt-formatting:1.23.3")

    // parser
    implementation("io.github.copper-leaf:kudzu-core:5.1.0")
    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api("org.apache.commons:commons-math3:3.6.1")

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation("com.google.guava:guava:31.1-jre")
}

detekt {
    buildUponDefaultConfig = true // preconfigure defaults
    allRules = false // activate all available (even unstable) rules.
    config.setFrom("$rootDir/tools/detekt.yml")
    autoCorrect = true
}

tasks.withType<io.gitlab.arturbosch.detekt.Detekt>().configureEach {
    exclude("$rootDir/lib/src/test")
}

// Apply a specific Java toolchain to ease working on different environments.
java {

    withJavadocJar()
    withSourcesJar()
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(21))
    }
}

tasks.withType<io.gitlab.arturbosch.detekt.Detekt>().configureEach {
    reports {
        html.required.set(true) // observe findings in your browser with structure and code snippets
        xml.required.set(true) // checkstyle like format mainly for integrations like Jenkins
        txt.required.set(true) // similar to the console output, contains issue signature to manually edit baseline files
        sarif.required.set(true) // standardized SARIF format (https://sarifweb.azurewebsites.net/) to support integrations with GitHub Code Scanning
        md.required.set(true) // simple Markdown format
    }
}

tasks.named<Test>("test") {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}


val publicationVariant = "release"
val myVersion = project.property("LIBRARY_VERSION").toString()
val myArtifactId = "zip321"
val isSnapshot = project.property("IS_SNAPSHOT").toString().toBoolean()


jreleaser {
    gitRootSearch.set(true)
    version = myVersion

    signing {
        active.set(Active.ALWAYS)
        armored.set(true)
    }
    deploy {
        maven {
            mavenCentral {
                active.set(Active.ALWAYS)

//                    url.set("https://central.sonatype.com/api/v1/publisher")
//                    stagingRepository.set("target/staging-deploy")

            }
        }
    }
}

publishing {
    publications {
        create<MavenPublication>("mavenJava") {
            from(components["java"])  // Publish the "java" component (the jar file)

            groupId = "org.zecdev"
            artifactId  = myArtifactId
            version = myVersion
//            version = if (isSnapshot) {
//                "$myVersion-SNAPSHOT"
//            } else {
//                myVersion
//            }

            pom {
                name.set("Zcash Kotlin Payment URI")
                description.set("A concise implementation of ZIP-321 in Kotlin.")
                url.set("https://github.com/zecdev/zcash-kotlin-payment-uri")
                inceptionYear.set("2023")
                scm {
                    url.set("https://github.com/zecdev/zcash-kotlin-payment-uri")
                    connection.set("scm:git:git://github.com/zecdev/zcash-kotlin-payment-uri.git")
                    developerConnection.set("scm:git:ssh://git@github.com/zecdev/zcash-kotlin-payment-uri.git")
                }
                developers {
                    developer {
                        id.set("ZecDev")
                        name.set("ZecDev")
                        url.set("https://github.com/zecdev")
                    }
                }
                licenses {
                    license {
                        name.set("The MIT License")
                        url.set("https://opensource.org/licenses/MIT")
                        distribution.set("repo")
                    }
                }
            }
        }
    }
    repositories {
        maven {
            url = layout.buildDirectory.dir("staging-deploy").get().asFile.toURI()
        }
    }
}


//signing {
//    // Maven Central requires signing for non-snapshots
//    isRequired = !isSnapshot
//
//    val signingKey = run {
//        val base64EncodedKey = project.property("ZECDEV_ASCII_GPG_KEY").toString()
//        if (base64EncodedKey.isNotEmpty()) {
//            val keyBytes = Base64.getDecoder().decode(base64EncodedKey)
//            String(keyBytes)
//        } else {
//            ""
//        }
//    }
//
//    if (signingKey.isNotEmpty()) {
//        useInMemoryPgpKeys(signingKey, "")
//    }
//
//    sign(publishing.publications)
//}




// Workaround for:
// - https://youtrack.jetbrains.com/issue/KT-46466
// - https://github.com/gradle/gradle/issues/26091
// A problem was found with the configuration of task ':bip39-lib:signKotlinMultiplatformPublication' (type 'Sign').
// Gradle detected a problem with the following location:
// '/home/runner/work/kotlin-bip39/kotlin-bip39/bip39-lib/build/libs/bip39-lib-javadoc.jar.asc'.
// Reason: Task ':bip39-lib:publishJvmPublicationToMavenLocalRepository' uses this output of task
// ':bip39-lib:signKotlinMultiplatformPublication' without declaring an explicit or implicit
// dependency. This can lead to incorrect results being produced, depending on what order the tasks are executed.
val signingTasks = tasks.withType<Sign>()
tasks.withType<AbstractPublishToMaven>().configureEach {
    dependsOn(signingTasks)
}
